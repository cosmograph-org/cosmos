diff --git a/src/index.ts b/src/index.ts
index 2840e5c..2c7c05c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -263,11 +263,11 @@ export class Graph {
   /**
    * Sets the positions for the graph points.
    *
-   * @param {number[]} pointPositions - An array representing the positions of points in the format [x1, y1, x2, y2, ..., xn, yn],
+   * @param {Float32Array} pointPositions - A Float32Array representing the positions of points in the format [x1, y1, x2, y2, ..., xn, yn],
    * where `n` is the index of the point.
-   * Example: `[1, 2, 3, 4, 5, 6]` sets the first point to (1, 2), the second point to (3, 4), and so on.
+   * Example: `new Float32Array([1, 2, 3, 4, 5, 6])` sets the first point to (1, 2), the second point to (3, 4), and so on.
    */
-  public setPointPositions (pointPositions: number[]): void {
+  public setPointPositions (pointPositions: Float32Array): void {
     this.graph.inputPointPositions = pointPositions
     this._hasPointPositionsChanged = true
   }
@@ -275,11 +275,11 @@ export class Graph {
   /**
    * Sets the colors for the graph points.
    *
-   * @param {number[]} pointColors - An array representing the colors of points in the format [r1, g1, b1, a1, r2, g2, b2, a2, ..., rn, gn, bn, an],
+   * @param {Float32Array} pointColors - A Float32Array representing the colors of points in the format [r1, g1, b1, a1, r2, g2, b2, a2, ..., rn, gn, bn, an],
    * where each color is represented in RGBA format.
-   * Example: `[255, 0, 0, 1, 0, 255, 0, 1]` sets the first point to red and the second point to green.
+   * Example: `new Float32Array([255, 0, 0, 1, 0, 255, 0, 1])` sets the first point to red and the second point to green.
   */
-  public setPointColors (pointColors: number[]): void {
+  public setPointColors (pointColors: Float32Array): void {
     this.graph.inputPointColors = pointColors
     this._hasPointColorsChanged = true
   }
@@ -287,11 +287,11 @@ export class Graph {
   /**
    * Sets the sizes for the graph points.
    *
-   * @param {number[]} pointSizes - An array representing the sizes of points in the format [size1, size2, ..., sizen],
+   * @param {Float32Array} pointSizes - A Float32Array representing the sizes of points in the format [size1, size2, ..., sizen],
    * where `n` is the index of the point.
-   * Example: `[10, 20, 30]` sets the first point to size 10, the second point to size 20, and the third point to size 30.
+   * Example: `new Float32Array([10, 20, 30])` sets the first point to size 10, the second point to size 20, and the third point to size 30.
    */
-  public setPointSizes (pointSizes: number[]): void {
+  public setPointSizes (pointSizes: Float32Array): void {
     this.graph.inputPointSizes = pointSizes
     this._hasPointSizesChanged = true
   }
@@ -299,11 +299,12 @@ export class Graph {
   /**
    * Sets the links for the graph.
    *
-   * @param {number[]} links - An array representing the links between points in the format [source1, target1, source2, target2, ..., sourcen, targetn],
+   * @param {Float32Array} links - A Float32Array representing the links between points
+   * in the format [source1, target1, source2, target2, ..., sourcen, targetn],
    * where `source` and `target` are the indices of the points being linked.
-   * Example: `[0, 1, 1, 2]` creates a link from point 0 to point 1 and another link from point 1 to point 2.
+   * Example: `new Float32Array([0, 1, 1, 2])` creates a link from point 0 to point 1 and another link from point 1 to point 2.
    */
-  public setLinks (links: number[]): void {
+  public setLinks (links: Float32Array): void {
     this.graph.inputLinks = links
     this._hasLinksChanged = true
   }
@@ -311,11 +312,11 @@ export class Graph {
   /**
    * Sets the colors for the graph links.
    *
-   * @param {number[]} linkColors - An array representing the colors of links in the format [r1, g1, b1, a1, r2, g2, b2, a2, ..., rn, gn, bn, an],
+   * @param {Float32Array} linkColors - A Float32Array representing the colors of links in the format [r1, g1, b1, a1, r2, g2, b2, a2, ..., rn, gn, bn, an],
    * where each color is in RGBA format.
-   * Example: `[255, 0, 0, 1, 0, 255, 0, 1]` sets the first link to red and the second link to green.
+   * Example: `new Float32Array([255, 0, 0, 1, 0, 255, 0, 1])` sets the first link to red and the second link to green.
    */
-  public setLinkColors (linkColors: number[]): void {
+  public setLinkColors (linkColors: Float32Array): void {
     this.graph.inputLinkColors = linkColors
     this._hasLinkColorsChanged = true
   }
@@ -323,11 +324,11 @@ export class Graph {
   /**
    * Sets the widths for the graph links.
    *
-   * @param {number[]} linkWidths - An array representing the widths of links in the format [width1, width2, ..., widthn],
+   * @param {Float32Array} linkWidths - A Float32Array representing the widths of links in the format [width1, width2, ..., widthn],
    * where `n` is the index of the link.
-   * Example: `[1, 2, 3]` sets the first link to width 1, the second link to width 2, and the third link to width 3.
+   * Example: `new Float32Array([1, 2, 3])` sets the first link to width 1, the second link to width 2, and the third link to width 3.
    */
-  public setLinkWidths (linkWidths: number[]): void {
+  public setLinkWidths (linkWidths: Float32Array): void {
     this.graph.inputLinkWidths = linkWidths
     this._hasLinkWidthsChanged = true
   }
@@ -347,11 +348,11 @@ export class Graph {
   /**
    * Sets the strength for the graph links.
    *
-   * @param {number[]} linkStrength - An array representing the strength of each link in the format [strength1, strength2, ..., strengthn],
+   * @param {Float32Array} linkStrength - A Float32Array representing the strength of each link in the format [strength1, strength2, ..., strengthn],
    * where `n` is the index of the link.
-   * Example: `[1, 2, 3]` sets the first link to strength 1, the second link to strength 2, and the third link to strength 3.
+   * Example: `new Float32Array([1, 2, 3])` sets the first link to strength 1, the second link to strength 2, and the third link to strength 3.
    */
-  public setLinkStrength (linkStrength: number[]): void {
+  public setLinkStrength (linkStrength: Float32Array): void {
     this.graph.inputLinkStrength = linkStrength
   }
 
@@ -392,11 +393,11 @@ export class Graph {
    * This method allows you to customize the forces acting on individual points during the clustering process.
    * The force coefficients determine the strength of the forces applied to each point.
    *
-   * @param {number[]} forceCoefficients - Array of force coefficients for each point in the format [coeff1, coeff2, ..., coeffn],
+   * @param {Float32Array} forceCoefficients - A Float32Array of force coefficients for each point in the format [coeff1, coeff2, ..., coeffn],
    * where `n` is the index of the point.
-   * Example: `[1, 0.4, 0.3]` sets the force coefficient for point 0 to 1, point 1 to 0.4, and point 2 to 0.3.
+   * Example: `new Float32Array([1, 0.4, 0.3])` sets the force coefficient for point 0 to 1, point 1 to 0.4, and point 2 to 0.3.
    */
-  public setClusterForceCoefficients (forceCoefficients: number[]): void {
+  public setClusterForceCoefficients (forceCoefficients: Float32Array): void {
     this.graph.inputPointClusterForces = forceCoefficients
     this._hasPointClusterForceChanged = true
   }
diff --git a/src/modules/GraphData/index.ts b/src/modules/GraphData/index.ts
index 0201970..770ff34 100644
--- a/src/modules/GraphData/index.ts
+++ b/src/modules/GraphData/index.ts
@@ -1,31 +1,31 @@
 import { getRgbaColor, isNumber } from '@/graph/helper'
 import { GraphConfig } from '@/graph/config'
 export class GraphData {
-  public inputPointPositions: number[] | undefined
-  public inputPointColors: number[] | undefined
-  public inputPointSizes: number[] | undefined
-  public inputLinkColors: number[] | undefined
-  public inputLinkWidths: number[] | undefined
-  public inputLinkStrength: number[] | undefined
+  public inputPointPositions: Float32Array | undefined
+  public inputPointColors: Float32Array | undefined
+  public inputPointSizes: Float32Array | undefined
+  public inputLinkColors: Float32Array | undefined
+  public inputLinkWidths: Float32Array | undefined
+  public inputLinkStrength: Float32Array | undefined
   public inputPointClusters: (number | undefined)[] | undefined
   public inputClusterPositions: (number | undefined)[] | undefined
-  public inputPointClusterForces: number[] | undefined
+  public inputPointClusterForces: Float32Array | undefined
 
-  public pointPositions: number[] | undefined
-  public pointColors: number[] | undefined
-  public pointSizes: number[] | undefined
+  public pointPositions: Float32Array | undefined
+  public pointColors: Float32Array | undefined
+  public pointSizes: Float32Array | undefined
 
-  public inputLinks: number[] | undefined
-  public links: number[] | undefined
-  public linkColors: number[] | undefined
-  public linkWidths: number[] | undefined
+  public inputLinks: Float32Array | undefined
+  public links: Float32Array | undefined
+  public linkColors: Float32Array | undefined
+  public linkWidths: Float32Array | undefined
   public linkArrowsBoolean: boolean[] | undefined
   public linkArrows: number[] | undefined
-  public linkStrength: (number | undefined)[] | undefined
+  public linkStrength: Float32Array | undefined
 
   public pointClusters: (number | undefined)[] | undefined
   public clusterPositions: (number | undefined)[] | undefined
-  public pointClusterForces: number[] | undefined
+  public pointClusterForces: Float32Array | undefined
 
   /**
    * Each inner array of `sourceIndexToTargetIndices` and `targetIndexToSourceIndices` contains pairs where:
@@ -67,7 +67,7 @@ export class GraphData {
     // Sets point colors to default values from config if the input is missing or does not match input points number.
     const defaultRgba = getRgbaColor(this._config.defaultPointColor)
     if (this.inputPointColors === undefined || this.inputPointColors.length / 4 !== this.pointsNumber) {
-      this.pointColors = new Array(this.pointsNumber * 4)
+      this.pointColors = new Float32Array(this.pointsNumber * 4)
       for (let i = 0; i < this.pointColors.length / 4; i++) {
         this.pointColors[i * 4] = defaultRgba[0]
         this.pointColors[i * 4 + 1] = defaultRgba[1]
@@ -96,7 +96,7 @@ export class GraphData {
 
     // Sets point sizes to default values from config if the input is missing or does not match input points number.
     if (this.inputPointSizes === undefined || this.inputPointSizes.length !== this.pointsNumber) {
-      this.pointSizes = new Array(this.pointsNumber).fill(this._config.defaultPointSize)
+      this.pointSizes = new Float32Array(this.pointsNumber).fill(this._config.defaultPointSize)
     } else {
       this.pointSizes = this.inputPointSizes
       for (let i = 0; i < this.pointSizes.length; i++) {
@@ -123,7 +123,7 @@ export class GraphData {
     // Sets link colors to default values from config if the input is missing or does not match input links number.
     const defaultRgba = getRgbaColor(this._config.defaultLinkColor)
     if (this.inputLinkColors === undefined || this.inputLinkColors.length / 4 !== this.linksNumber) {
-      this.linkColors = new Array(this.linksNumber * 4)
+      this.linkColors = new Float32Array(this.linksNumber * 4)
 
       for (let i = 0; i < this.linkColors.length / 4; i++) {
         this.linkColors[i * 4] = defaultRgba[0]
@@ -153,7 +153,7 @@ export class GraphData {
 
     // Sets link widths to default values from config if the input is missing or does not match input links number.
     if (this.inputLinkWidths === undefined || this.inputLinkWidths.length !== this.linksNumber) {
-      this.linkWidths = new Array(this.linksNumber).fill(this._config.defaultLinkWidth)
+      this.linkWidths = new Float32Array(this.linksNumber).fill(this._config.defaultLinkWidth)
     } else {
       this.linkWidths = this.inputLinkWidths
       for (let i = 0; i < this.linkWidths.length; i++) {
diff --git a/src/modules/Lines/index.ts b/src/modules/Lines/index.ts
index 355432a..0839a72 100644
--- a/src/modules/Lines/index.ts
+++ b/src/modules/Lines/index.ts
@@ -132,19 +132,19 @@ export class Lines extends CoreModule {
   public updateColor (): void {
     const { reglInstance, data } = this
     if (!this.colorBuffer) this.colorBuffer = reglInstance.buffer(0)
-    this.colorBuffer(data.linkColors ?? [])
+    this.colorBuffer(data.linkColors ?? new Float32Array())
   }
 
   public updateWidth (): void {
     const { reglInstance, data } = this
     if (!this.widthBuffer) this.widthBuffer = reglInstance.buffer(0)
-    this.widthBuffer(data.linkWidths ?? [])
+    this.widthBuffer(data.linkWidths ?? new Float32Array())
   }
 
   public updateArrow (): void {
     const { reglInstance, data } = this
     if (!this.arrowBuffer) this.arrowBuffer = reglInstance.buffer(0)
-    this.arrowBuffer(data.linkArrows ?? [])
+    this.arrowBuffer(data.linkArrows ?? new Float32Array())
   }
 
   public updateCurveLineGeometry (): void {
diff --git a/src/modules/Points/index.ts b/src/modules/Points/index.ts
index cf96a06..3d9b4f1 100644
--- a/src/modules/Points/index.ts
+++ b/src/modules/Points/index.ts
@@ -403,7 +403,7 @@ export class Points extends CoreModule {
     const { reglInstance, store: { pointsTextureSize }, data } = this
     if (!pointsTextureSize) return
     if (!this.colorBuffer) this.colorBuffer = reglInstance.buffer(0)
-    this.colorBuffer(data.pointColors as number[])
+    this.colorBuffer(data.pointColors as Float32Array)
   }
 
   public updateGreyoutStatus (): void {
diff --git a/src/stories/clusters.stories.ts b/src/stories/clusters.stories.ts
index e986286..0978177 100644
--- a/src/stories/clusters.stories.ts
+++ b/src/stories/clusters.stories.ts
@@ -30,6 +30,7 @@ export const worm: Story = {
     pointColors: wormData.pointColors,
     pointClusters: wormData.clusters,
     links: wormData.links,
+    linkColors: wormData.linkColors,
   },
 }
 
@@ -38,9 +39,14 @@ export const radial: Story = {
   args: {
     pointPositions: radialData.pointPositions,
     pointColors: radialData.pointColors,
+    pointSizes: radialData.pointSizes,
     pointClusters: radialData.clusters,
-    clusterPositions: radialData.clusterPositions,
+
     links: radialData.links,
+    linkColors: radialData.linkColors,
+    linkWidths: radialData.linkWidths,
+
+    clusterPositions: radialData.clusterPositions,
     clusterForces: radialData.clusterForces,
   },
 }
diff --git a/src/stories/cosmos.ts b/src/stories/cosmos.ts
index d30f71b..f2e3577 100644
--- a/src/stories/cosmos.ts
+++ b/src/stories/cosmos.ts
@@ -2,12 +2,18 @@ import { GraphConfigInterface } from '@/graph/config'
 import { Graph } from '@/graph/index'
 
 export type CosmosStoryProps = GraphConfigInterface & {
-  pointPositions: number[];
-  links: number[];
-  pointColors: number[];
+  pointPositions: Float32Array;
+  pointColors: Float32Array;
+  pointSizes?: Float32Array;
+
+  links?: Float32Array;
+  linkColors?: Float32Array;
+  linkWidths?: Float32Array;
+  // linkStrength?: Float32Array;
+
   pointClusters?: number[];
   clusterPositions?: number[];
-  clusterForces?: number[];
+  clusterForces?: Float32Array;
 }
 
 export const createCosmos = (props: CosmosStoryProps): HTMLCanvasElement => {
@@ -45,8 +51,12 @@ export const createCosmos = (props: CosmosStoryProps): HTMLCanvasElement => {
 
     graph.setPointPositions(props.pointPositions)
     graph.setPointColors(props.pointColors)
+    if (props.pointSizes) graph.setPointSizes(props.pointSizes)
 
     if (props.links) graph.setLinks(props.links)
+    if (props.linkColors) graph.setLinkColors(props.linkColors)
+    if (props.linkWidths) graph.setLinkWidths(props.linkWidths)
+    // if (props.linkStrength) graph.setLinkStrength(props.linkStrength)
 
     if (props.pointClusters) graph.setPointClusters(props.pointClusters)
     if (props.clusterPositions) graph.setClusterPositions(props.clusterPositions)
diff --git a/src/stories/data.mesh.ts b/src/stories/data.mesh.ts
index 130a955..6991823 100644
--- a/src/stories/data.mesh.ts
+++ b/src/stories/data.mesh.ts
@@ -13,12 +13,18 @@ function getPositionOnCircle (radius: number, angle: number, center: number): [n
 }
 
 export type MeshData = {
-  pointPositions: number[];
-  links: number[];
+  pointPositions: Float32Array;
+  pointColors: Float32Array;
+  pointSizes: Float32Array;
+
+  links: Float32Array;
+  linkColors: Float32Array;
+  linkWidths: Float32Array;
+  // linkStrength: Float32Array;
+
   clusters: number[];
   clusterPositions: number[];
-  clusterForces: number[];
-  pointColors: number[];
+  clusterForces: Float32Array;
 }
 
 export function generateMeshData (
@@ -33,12 +39,13 @@ export function generateMeshData (
   const radius = scaleLinear(radialness)
   radius.domain([0, nClusters])
 
-  const pointPositions = new Array(n * m * 2)
+  const pointPositions = new Float32Array(n * m * 2)
   const links: number[] = []
   const clusters = new Array(n * m)
   const clusterPositions = new Array(nClusters * 2)
-  const clusterForces = new Array(n * m)
-  const pointColors = new Array(n * m * 4)
+  const clusterForces = new Float32Array(n * m)
+  const pointColors = new Float32Array(n * m * 4)
+  const pointSizes = new Float32Array(n * m)
 
   const spaceSize = 4096
 
@@ -63,6 +70,8 @@ export function generateMeshData (
     pointColors[pointIndex * 4 + 2] = rgba[2]
     pointColors[pointIndex * 4 + 3] = rgba[3]
 
+    pointSizes[pointIndex] = getRandom(1, 5)
+
     const nextPointIndex = pointIndex + 1
     const bottomPointIndex = pointIndex + n
     const pointLine = Math.floor(pointIndex / n)
@@ -80,5 +89,33 @@ export function generateMeshData (
     }
   }
 
-  return { pointPositions, links, clusters, clusterForces, clusterPositions, pointColors }
+  const linkColors = new Float32Array(links.length / 2 * 4)
+  const linkWidths = new Float32Array(links.length / 2)
+  // const linkStrength = new Float32Array(links.length / 2)
+  for (let i = 0; i < links.length / 2; i++) {
+    const sourcePointIndex = links[i * 2] as number
+    const rgba = getRgbaColor(pointColorScale(sourcePointIndex % nClusters))
+    linkColors[i * 4 + 0] = rgba[0]
+    linkColors[i * 4 + 1] = rgba[1]
+    linkColors[i * 4 + 2] = rgba[2]
+    linkColors[i * 4 + 3] = 0.9
+
+    linkWidths[i] = getRandom(0.1, 0.5)
+    // linkStrength[i] = (n * m - sourcePointIndex) / (n * m)
+  }
+
+  return {
+    pointPositions,
+    pointColors,
+    pointSizes,
+
+    links: new Float32Array(links),
+    linkColors,
+    linkWidths,
+    // linkStrength,
+
+    clusters,
+    clusterForces,
+    clusterPositions,
+  }
 }
